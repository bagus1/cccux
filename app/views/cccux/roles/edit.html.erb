<div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 2rem;">
  <h1>Edit Role: <%= @role.name %></h1>
  <div>
    <%= link_to "View Role", cccux.role_path(@role), 
        style: "background-color: #17a2b8; color: white; padding: 0.5rem 1rem; text-decoration: none; border-radius: 4px; margin-right: 0.5rem;" %>
    <%= link_to "Back to Roles", cccux.roles_path, 
        style: "background-color: #6c757d; color: white; padding: 0.5rem 1rem; text-decoration: none; border-radius: 4px;" %>
  </div>
</div>

<%= form_with model: [@role], url: cccux.role_path(@role), local: true, method: :patch do |form| %>
  <% if @role.errors.any? %>
    <div style="background-color: #f8d7da; border: 1px solid #721c24; padding: 1rem; margin-bottom: 2rem; border-radius: 4px;">
      <h4><%= pluralize(@role.errors.count, "error") %> prohibited this role from being saved:</h4>
      <ul>
        <% @role.errors.full_messages.each do |message| %>
          <li><%= message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div style="display: grid; grid-template-columns: 1fr 2fr; gap: 2rem; margin-bottom: 2rem;">
    <!-- Basic Role Information -->
    <div style="background-color: white; border: 1px solid #dee2e6; border-radius: 8px; padding: 1.5rem;">
      <h3 style="margin-top: 0; color: #495057;">Basic Information</h3>
      
      <div style="margin-bottom: 1.5rem;">
        <%= form.label :name, style: "display: block; margin-bottom: 0.5rem; font-weight: bold; color: #495057;" %>
        <%= form.text_field :name, 
            style: "width: 100%; padding: 0.75rem; border: 1px solid #ced4da; border-radius: 4px; font-size: 1rem;" %>
      </div>

      <div style="margin-bottom: 1.5rem;">
        <%= form.label :description, style: "display: block; margin-bottom: 0.5rem; font-weight: bold; color: #495057;" %>
        <%= form.text_area :description, rows: 4,
            style: "width: 100%; padding: 0.75rem; border: 1px solid #ced4da; border-radius: 4px; font-size: 1rem; resize: vertical;" %>
      </div>

      <div style="margin-bottom: 1.5rem;">
        <label style="display: flex; align-items: center; cursor: pointer;">
          <%= form.check_box :active, { checked: @role.active.nil? ? true : @role.active }, 
              style: "margin-right: 0.5rem; transform: scale(1.2);" %>
          <span style="font-weight: bold; color: #495057;">Active Role</span>
        </label>
        <small style="color: #6c757d; font-size: 0.9rem; margin-top: 0.25rem; display: block; margin-left: 1.5rem;">
          Only active roles can be assigned to users. Inactive roles are hidden from user assignment forms.
        </small>
      </div>
      
      <div style="background-color: #f8f9fa; padding: 1rem; border-radius: 4px;">
        <strong style="color: #495057;">Current Users:</strong>
        <div style="margin-top: 0.5rem;">
          <%= pluralize(@role.users.count, 'user') %> assigned to this role
        </div>
      </div>
    </div>
    
    <!-- Permission Management -->
    <div style="background-color: white; border: 1px solid #dee2e6; border-radius: 8px; padding: 1.5rem;">
      <h3 style="margin-top: 0; color: #495057;">Permissions</h3>
      
      <!-- Permission Legend -->
      <div style="background-color: #e7f3ff; border: 1px solid #b8daff; padding: 1rem; border-radius: 4px; margin-bottom: 1.5rem;">
        <h6 style="margin: 0 0 0.5rem 0; color: #004085; font-weight: bold;">Permission Context Guide:</h6>
        <div style="font-size: 0.85rem; color: #004085; line-height: 1.4;">
          <div style="margin-bottom: 0.25rem;"><strong>Global:</strong> Access all records everywhere</div>
          <div style="margin-bottom: 0.25rem;"><strong>Contextual:</strong> Access records within authorized scope (e.g., stores you manage)</div>
          <div style="margin-bottom: 0.25rem;"><strong>Owned Only:</strong> Access only records you personally created</div>
          <div style="margin-top: 0.5rem; padding-top: 0.5rem; border-top: 1px solid #b8daff;">
            <strong>Scope:</strong> When context is "Contextual", choose between all records in scope or only owned records in scope
          </div>
        </div>
      </div>

      <!-- Implementation Requirements Alert (initially hidden) -->
      <div id="implementation-alert" style="display: none; background-color: #fff3cd; border: 1px solid #ffeaa7; padding: 1rem; border-radius: 4px; margin-bottom: 1.5rem;">
        <h6 style="margin: 0 0 0.5rem 0; color: #856404; font-weight: bold;">
          <span style="margin-right: 0.5rem;">⚠️</span>Implementation Required
        </h6>
        <div id="implementation-message" style="font-size: 0.9rem; color: #856404; line-height: 1.4;">
          <!-- Dynamic content will be inserted here -->
        </div>
      </div>
      
      <% if @available_permissions.any? %>
        <% @available_permissions.each do |subject, permissions| %>
          <div style="margin-bottom: 1.5rem; padding: 1rem; border: 1px solid #e9ecef; border-radius: 4px;">
            <h5 style="margin: 0 0 0.75rem 0; color: #495057; font-weight: bold;"><%= subject %></h5>
            
            <!-- Action Permissions with Individual Ownership Controls -->
            <div style="display: grid; grid-template-columns: 1fr; gap: 0.5rem;">
              <% permissions.each do |permission| %>
                <% 
                  # Check if this permission is currently assigned to the role
                  is_assigned = @role.ability_permissions.include?(permission)
                  
                  # Get the current ownership setting for this specific permission
                  role_ability = @role.role_abilities.find_by(ability_permission: permission)
                  is_owned = role_ability&.owned || false
                  current_context = role_ability&.context || 'global'
                %>
                
                <div style="display: flex; align-items: center; padding: 0.75rem; border: 1px solid #e9ecef; border-radius: 4px; background-color: #f8f9fa;"
                     data-permission-id="<%= permission.id %>">
                  <!-- Permission Checkbox -->
                  <div style="margin-right: 1rem; min-width: 100px;">
                    <%= check_box_tag "role[ability_permission_ids][]", 
                        permission.id, 
                        is_assigned,
                        style: "margin-right: 0.5rem;",
                        class: "permission-checkbox",
                        data: { permission_id: permission.id } %>
                    <span style="font-size: 0.9rem; color: #495057; font-weight: bold;">
                      <%= permission.action.capitalize %>
                    </span>
                  </div>
                  
                  <!-- Context and Scope Controls -->
                  <div style="margin-left: auto; display: flex; align-items: center; gap: 1.5rem;">
                    <!-- Context Selection -->
                    <div style="display: flex; align-items: center; gap: 0.5rem;" class="context-controls">
                      <span style="font-size: 0.8rem; color: #6c757d; font-weight: bold;">Access:</span>
                      
                      <%= radio_button_tag "role[permission_context][#{permission.id}]", "global", 
                          current_context == 'global', 
                          id: "context_global_#{permission.id}",
                          style: "margin-right: 0.25rem;",
                          class: "context-radio",
                          disabled: !is_assigned %>
                      <%= label_tag "context_global_#{permission.id}", "Global", 
                          style: "font-size: 0.8rem; cursor: pointer; margin-right: 0.75rem;",
                          class: "context-label #{is_assigned ? '' : 'text-muted'}" %>
                      
                      <%= radio_button_tag "role[permission_context][#{permission.id}]", "scoped", 
                          current_context == 'scoped', 
                          id: "context_scoped_#{permission.id}",
                          style: "margin-right: 0.25rem;",
                          class: "context-radio",
                          disabled: !is_assigned %>
                      <%= label_tag "context_scoped_#{permission.id}", "Contextual", 
                          style: "font-size: 0.8rem; cursor: pointer; margin-right: 0.75rem;",
                          class: "context-label #{is_assigned ? '' : 'text-muted'}" %>
                      
                      <%= radio_button_tag "role[permission_context][#{permission.id}]", "owned", 
                          current_context == 'owned', 
                          id: "context_owned_#{permission.id}",
                          style: "margin-right: 0.25rem;",
                          class: "context-radio",
                          disabled: !is_assigned %>
                      <%= label_tag "context_owned_#{permission.id}", "Owned Only", 
                          style: "font-size: 0.8rem; cursor: pointer;",
                          class: "context-label #{is_assigned ? '' : 'text-muted'}" %>
                    </div>
                    
                    <!-- Scope Controls (only show for Contextual access and models that support ownership) -->
                    <% if permission.supports_ownership? && permission.model_supports_ownership? %>
                      <div style="display: <%= current_context == 'scoped' && is_assigned ? 'flex' : 'none' %>; align-items: center; gap: 0.5rem;" 
                           class="scope-controls">
                        <span style="font-size: 0.8rem; color: #6c757d; font-weight: bold;">Scope:</span>
                        
                        <%= radio_button_tag "role[permission_owned][#{permission.id}]", "false", 
                            !is_owned, 
                            id: "scope_all_#{permission.id}",
                            style: "margin-right: 0.25rem;",
                            class: "scope-radio",
                            disabled: !is_assigned || current_context != 'scoped' %>
                        <%= label_tag "scope_all_#{permission.id}", "All in Context", 
                            style: "font-size: 0.8rem; cursor: pointer; margin-right: 0.75rem;",
                            class: "scope-label #{is_assigned && current_context == 'scoped' ? '' : 'text-muted'}" %>
                        
                        <%= radio_button_tag "role[permission_owned][#{permission.id}]", "true", 
                            is_owned, 
                            id: "scope_owned_#{permission.id}",
                            style: "margin-right: 0.25rem;",
                            class: "scope-radio",
                            disabled: !is_assigned || current_context != 'scoped' %>
                        <%= label_tag "scope_owned_#{permission.id}", "Owned in Context", 
                            style: "font-size: 0.8rem; cursor: pointer;",
                            class: "scope-label #{is_assigned && current_context == 'scoped' ? '' : 'text-muted'}" %>
                      </div>
                    <% end %>
                  </div>
                </div>
              <% end %>
            </div>
          </div>
        <% end %>
        
        <!-- Hidden field to ensure empty array is sent when no permissions are selected -->
        <%= hidden_field_tag "role[ability_permission_ids][]", "", id: nil %>
      <% else %>
        <p style="color: #6c757d; font-style: italic;">No permissions available to assign.</p>
      <% end %>
    </div>
  </div>

  <!-- Enhanced JavaScript for permission interactions -->
  <script>
    document.addEventListener('DOMContentLoaded', function() {
              // Handle permission checkbox changes
        document.querySelectorAll('.permission-checkbox').forEach(function(checkbox) {
          checkbox.addEventListener('change', function() {
            updatePermissionControls(this.dataset.permissionId);
            updateImplementationAlert();
          });
        });

              // Handle context radio button changes
        document.querySelectorAll('.context-radio').forEach(function(radio) {
          radio.addEventListener('change', function() {
            const permissionId = this.name.match(/\[(\d+)\]/)[1];
            updateScopeVisibility(permissionId);
            updateImplementationAlert();
          });
        });

        // Handle scope radio button changes  
        document.querySelectorAll('.scope-radio').forEach(function(radio) {
          radio.addEventListener('change', function() {
            updateImplementationAlert();
          });
        });

      // Initialize all permission controls on page load
      document.querySelectorAll('.permission-checkbox').forEach(function(checkbox) {
        updatePermissionControls(checkbox.dataset.permissionId);
      });
      
      // Initialize implementation alert
      updateImplementationAlert();

      function updatePermissionControls(permissionId) {
        const checkbox = document.querySelector(`input[data-permission-id="${permissionId}"]`);
        const permissionRow = document.querySelector(`div[data-permission-id="${permissionId}"]`);
        const contextControls = permissionRow.querySelectorAll('.context-radio');
        const contextLabels = permissionRow.querySelectorAll('.context-label');
        const scopeControls = permissionRow.querySelectorAll('.scope-radio');
        const scopeLabels = permissionRow.querySelectorAll('.scope-label');
        
        if (checkbox.checked) {
          // Enable context controls
          contextControls.forEach(control => {
            control.disabled = false;
          });
          contextLabels.forEach(label => {
            label.classList.remove('text-muted');
            label.style.opacity = '1';
          });
          
          // Update scope visibility based on current context
          updateScopeVisibility(permissionId);
        } else {
          // Disable all controls
          contextControls.forEach(control => {
            control.disabled = true;
          });
          contextLabels.forEach(label => {
            label.classList.add('text-muted');
            label.style.opacity = '0.5';
          });
          
          scopeControls.forEach(control => {
            control.disabled = true;
          });
          scopeLabels.forEach(label => {
            label.classList.add('text-muted');
            label.style.opacity = '0.5';
          });
          
          // Hide scope controls
          const scopeContainer = permissionRow.querySelector('.scope-controls');
          if (scopeContainer) {
            scopeContainer.style.display = 'none';
          }
        }
      }

      function updateScopeVisibility(permissionId) {
        const checkbox = document.querySelector(`input[data-permission-id="${permissionId}"]`);
        const permissionRow = document.querySelector(`div[data-permission-id="${permissionId}"]`);
        const scopeContainer = permissionRow.querySelector('.scope-controls');
        const scopeControls = permissionRow.querySelectorAll('.scope-radio');
        const scopeLabels = permissionRow.querySelectorAll('.scope-label');
        
        if (!scopeContainer) return; // No scope controls for this permission
        
        const contextualRadio = document.querySelector(`#context_scoped_${permissionId}`);
        const isContextual = contextualRadio && contextualRadio.checked;
        const isPermissionEnabled = checkbox.checked;
        
        if (isPermissionEnabled && isContextual) {
          // Show and enable scope controls
          scopeContainer.style.display = 'flex';
          scopeControls.forEach(control => {
            control.disabled = false;
          });
          scopeLabels.forEach(label => {
            label.classList.remove('text-muted');
            label.style.opacity = '1';
          });
        } else {
          // Hide scope controls
          scopeContainer.style.display = 'none';
          scopeControls.forEach(control => {
            control.disabled = true;
          });
          scopeLabels.forEach(label => {
            label.classList.add('text-muted');
            label.style.opacity = '0.5';
          });
        }
      }

      function updateImplementationAlert() {
        const alertBox = document.getElementById('implementation-alert');
        const messageDiv = document.getElementById('implementation-message');
        
        // Check if any contextual or owned permissions are selected
        const hasContextual = document.querySelectorAll('input[value="scoped"]:checked').length > 0;
        const hasOwnedOnly = document.querySelectorAll('input[value="owned"]:checked').length > 0;
        const hasOwnedScope = document.querySelectorAll('input[name*="permission_owned"][value="true"]:checked').length > 0;
        
        if (hasContextual || hasOwnedOnly || hasOwnedScope) {
          let messages = [];
          
          if (hasContextual) {
            messages.push(`
              <div style="margin-bottom: 0.75rem;">
                <strong>For Contextual Access:</strong>
                <ul style="margin: 0.25rem 0 0 1.5rem; padding: 0;">
                  <li>Add <code>override_current_ability</code> method to your controller</li>
                  <li>Include <code>Cccux::ContextAware</code> concern in your controller</li>
                  <li>Add <code>in_current_scope?</code> method to your model</li>
                  <li>Include <code>Cccux::ScopedOwnership</code> concern in your model</li>
                </ul>
              </div>
            `);
          }
          
          if (hasOwnedOnly || hasOwnedScope) {
            messages.push(`
              <div style="margin-bottom: 0.75rem;">
                <strong>For Owned Access:</strong>
                <ul style="margin: 0.25rem 0 0 1.5rem; padding: 0;">
                  <li>Ensure your model has a <code>user_id</code> or owner association</li>
                  <li>Add <code>belongs_to :user</code> (or custom owner) to your model</li>
                  <li>Include <code>Cccux::ScopedOwnership</code> concern for ownership checks</li>
                </ul>
              </div>
            `);
          }
          
          messages.push(`
            <div style="background-color: #e8f4f8; padding: 0.75rem; border-radius: 4px; margin-top: 0.5rem;">
              <strong>💡 Quick Setup:</strong> Use <code>Cccux::NestedAuthorizationController</code> and <code>Cccux::ScopedOwnership</code> 
              concerns for automatic setup of most requirements.
            </div>
          `);
          
          messageDiv.innerHTML = messages.join('');
          alertBox.style.display = 'block';
        } else {
          alertBox.style.display = 'none';
        }
      }

      // Add CSS for muted text and code styling
      const style = document.createElement('style');
      style.textContent = `
        .text-muted {
          color: #6c757d !important;
        }
        code {
          background-color: #f8f9fa;
          padding: 0.2rem 0.4rem;
          border-radius: 3px;
          font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
          font-size: 0.875em;
          color: #e83e8c;
        }
      `;
      document.head.appendChild(style);
    });
  </script>

  <!-- Form Actions -->
  <div style="background-color: white; border: 1px solid #dee2e6; border-radius: 8px; padding: 1.5rem;">
    <div style="display: flex; justify-content: space-between; align-items: center;">
      <div>
        <%= form.submit "Update Role", 
            style: "background-color: #28a745; color: white; padding: 0.75rem 1.5rem; border: none; border-radius: 4px; cursor: pointer; font-size: 1rem; margin-right: 1rem;" %>
        <%= link_to "Cancel", cccux.role_path(@role), 
            style: "color: #6c757d; text-decoration: none; padding: 0.75rem 1rem; font-size: 1rem;" %>
      </div>
      
      <% unless @role.users.any? %>
        <div>
          <%= link_to "Delete Role", cccux.role_path(@role), 
              data: { "turbo-method": :delete, "turbo-confirm": "Are you sure? This action cannot be undone." },
              style: "background-color: #dc3545; color: white; padding: 0.75rem 1.5rem; text-decoration: none; border-radius: 4px; font-size: 1rem;" %>
        </div>
      <% else %>
        <div style="color: #6c757d; font-size: 0.9rem; font-style: italic;">
          Cannot delete role with assigned users
        </div>
      <% end %>
    </div>
  </div>
<% end %>